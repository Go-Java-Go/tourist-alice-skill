// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"context"
	"github.com/google/wire"
	"go.mongodb.org/mongo-driver/mongo"
	"tourist-alice-skill/internal/events"
	"tourist-alice-skill/internal/repository"
	"tourist-alice-skill/internal/service"
	"tourist-alice-skill/internal/skill"
)

// Injectors from wire.go:

func initApp(ctx context.Context, cli *mongo.Client, cfg *config) (*events.AliceListener, error) {
	database := initMongoDatabase(cli, cfg)
	mongoChatStateRepository := repository.NewChatStateRepository(database)
	chatStateService := service.NewChatStateService(mongoChatStateRepository)
	startScreen := skill.NewStartScreen(chatStateService)
	client, err := initIziTravelClient(cfg)
	if err != nil {
		return nil, err
	}
	operationScreen := skill.NewOperationScreen(chatStateService, client)
	v := ProvideBotList(startScreen, operationScreen)
	mongoUserRepository := repository.NewUserRepository(database)
	userService := service.NewUserService(mongoUserRepository)
	aliceListener, err := initSkillConfig(v, userService, chatStateService)
	if err != nil {
		return nil, err
	}
	return aliceListener, nil
}

// wire.go:

var bots = wire.NewSet(skill.NewStartScreen, skill.NewOperationScreen)

func ProvideBotList(s1 *skill.StartScreen, s2 *skill.OperationScreen) []skill.Interface {
	return []skill.Interface{s1, s2}
}
