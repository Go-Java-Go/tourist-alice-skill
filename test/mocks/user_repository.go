// Code generated by mockery v2.8.0. DO NOT EDIT.

// +build test

package mocks

import (
	context "context"
	api "tourist-alice-skill/internal/api"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// FindById provides a mock function with given fields: ctx, id
func (_m *UserRepository) FindById(ctx context.Context, id string) (*api.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *api.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *api.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpsertUser provides a mock function with given fields: ctx, u
func (_m *UserRepository) UpsertUser(ctx context.Context, u api.User) (*api.User, error) {
	ret := _m.Called(ctx, u)

	var r0 *api.User
	if rf, ok := ret.Get(0).(func(context.Context, api.User) *api.User); ok {
		r0 = rf(ctx, u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
